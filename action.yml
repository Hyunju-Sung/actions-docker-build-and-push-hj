name: 'Build Docker Image'
description: 'Build Docker Image'

inputs:
  service:
    description: for ECR Repository Name
    required: true
  dockerfile-path:
    description: dockerfile-absolute-path
    required: true
  tag:
    description: The tag name
    required: true
  env:
    description: environment (stg, prd)
    required: true
  custom-docker-build-command:
    description: docker-build-command
    default: ''
  custom-docker-image-name:
    description: docker-image-name
    default: ''
  custom-docker-tag:
    description: custom-docker-tag
    default: latest

runs:
  using: 'composite'
  steps:

    - name: Login to Amazon ECR Private
      id: login-ecr
      uses: Hyunju-Sung/actions-ecr-login-hj@0.0.4

    - name: Check Image Already Exists
      if: ${{ inputs.custom-docker-build-command == '' && inputs.custom-docker-image-name == '' && inputs.env == 'stg' && env.TAG_ALREADY_EXIST != 'true' }}
      env:
        ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ env.ecr-root }}/${{ inputs.env }}/${{ inputs.service }}
        IMAGE_TAG: ${{ inputs.tag }}
        CACHE_FILE: /tmp/docker-image-cache.tar.gz
      run: |
        docker build -q -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --file ${{ inputs.dockerfile-path }}
        NEW_DIGEST=$(docker inspect --format='{{.Id}}' $ECR_REGISTRY/$ECR_REPOSITORY:$NEW_TAG)
        echo "New image digest: $NEW_DIGEST"
        
        # List all the images in the ECR repository
        IMAGES=$(aws ecr list-images --repository-name $ECR_REPOSITORY --output json)

      shell: bash
