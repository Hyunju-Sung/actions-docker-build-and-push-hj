name: 'Build Docker Image'
description: 'Build Docker Image'

inputs:
  service:
    description: for ECR Repository Name
    required: true
  dockerfile-path:
    description: dockerfile-absolute-path
    required: true
  tag:
    description: The tag name
    required: true
  env:
    description: environment (stg, prd)
    required: true
  custom-docker-build-command:
    description: docker-build-command
    default: ''
  custom-docker-image-name:
    description: docker-image-name
    default: ''
  custom-docker-tag:
    description: custom-docker-tag
    default: latest

runs:
  using: 'composite'
  steps:

    - name: Login to Amazon ECR Private
      id: login-ecr
      uses: Hyunju-Sung/actions-ecr-login-hj@0.0.4

    - name: Build Docker Image and Push to ECR with dockerfile
      id: dockerizing-with-dockerfile
      if: ${{ inputs.custom-docker-build-command == '' && inputs.custom-docker-image-name == '' && inputs.env == 'stg' }}
      env:
        ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ env.ecr-root }}/${{ inputs.env }}/${{ inputs.service }}
        IMAGE_TAG: ${{ inputs.tag }}
        CACHE_FILE: /tmp/docker-image-cache.tar.gz
      run: |
        docker build -q -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --file ${{ inputs.dockerfile-path }}
        NEW_DIGEST=$(docker inspect --format='{{.Id}}' $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG)
        echo "New image digest: $NEW_DIGEST"
        
        # List all the images in the ECR repository
        IMAGES=$(aws ecr list-images --repository-name $ECR_REPOSITORY --output json)
        
        # Check if there is an image with the same digest as NEW_DIGEST
        IMAGE_FOUND=$(echo $IMAGES | jq -r --arg NEW_DIGEST "$NEW_DIGEST" '.imageIds[] | select(.imageDigest == $NEW_DIGEST) | .imageDigest' || true)
    
        if [ -n "$IMAGE_FOUND" ]; then
          echo "An image with the digest $NEW_DIGEST already exists in ECR."
          echo "::set-output name=image-digest-exists::true"
        else
          echo "No image with the digest $NEW_DIGEST found in ECR."
          echo "::set-output name=image-digest-exists::false"
          docker save $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG | gzip > $CACHE_FILE
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        fi
      shell: bash

    - name: Build Docker Image with command and Push to ECR with dockerfile
      id: dockerizing-with-command
      if: ${{ inputs.custom-docker-build-command != '' && inputs.custom-docker-image-name != '' && inputs.env == 'stg' }}
      env:
        ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ env.ecr-root }}/${{ inputs.env }}/${{ inputs.service }}
        IMAGE_TAG: ${{ inputs.tag }}
        CACHE_FILE: /tmp/docker-image-cache.tar.gz
      run: |
        ${{ inputs.custom-docker-build-command }}
        docker tag ${{ inputs.custom-docker-image-name }}:${{ inputs.custom-docker-tag }} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        NEW_DIGEST=$(docker inspect --format='{{.Id}}' $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG)
        echo "New image digest: $NEW_DIGEST"

        # List all the images in the ECR repository
        IMAGES=$(aws ecr list-images --repository-name $ECR_REPOSITORY --output json)

        # Check if there is an image with the same digest as NEW_DIGEST
        IMAGE_FOUND=$(echo $IMAGES | jq -r --arg NEW_DIGEST "$NEW_DIGEST" '.imageIds[] | select(.imageDigest == $NEW_DIGEST) | .imageDigest' || true)

        if [ -n "$IMAGE_FOUND" ]; then
          echo "An image with the digest $NEW_DIGEST already exists in ECR."
          echo "::set-output name=image-digest-exists::true"
        else
          echo "No image with the digest $NEW_DIGEST found in ECR."
          echo "::set-output name=image-digest-exists::false"
          docker save $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG | gzip > $CACHE_FILE
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        fi
      shell: bash

    - name: Cache Docker layers
      if: ${{ inputs.env == 'stg' }}
      uses: actions/cache@v2
      with:
        path: /tmp/docker-image-cache.tar.gz
        key: ${{ runner.os }}-docker-cache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-cache-

    - name: Restore Docker image cache
      if: ${{ inputs.env == 'prd' }}
      uses: actions/cache@v2
      with:
        path: /tmp/docker-image-cache.tar.gz
        key: ${{ runner.os }}-docker-cache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-cache-

    - name: Load cached Docker image
      if: ${{ inputs.env == 'prd' }}
      env:
        ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ env.ecr-root }}/${{ inputs.env }}/${{ inputs.service }}
        CACHE_FILE: /tmp/docker-image-cache.tar.gz
        NEW_IMAGE_TAG: ${{ inputs.tag }}
      run: |
        if [ -f "$CACHE_FILE" ]; then
          echo "Loading image from cache..."
          LOADING_RESULT=$(gunzip -c $CACHE_FILE | docker load)
          echo "$LOADING_RESULT"
          LOADED_IMAGE=$(echo "$LOADING_RESULT" | grep -oP '(?<=Loaded image: ).*')
          echo "Loaded Image: $LOADED_IMAGE"
          if [ -n "$LOADED_IMAGE" ]; then
            docker tag $LOADED_IMAGE $ECR_REGISTRY/$ECR_REPOSITORY:$NEW_IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$NEW_IMAGE_TAG
          else
            echo "Failed to retrieve loaded image."
          fi
        else
          echo "Cache file not found."
        fi
      shell: bash